{"version":3,"sources":["../../../src/helpers/auth/auth-endpoint.js"],"names":["response","code","headers","statusCode","data","JSON","stringify","makeAuthEndPointHanlder","userList","handle","httpRequest","path","loginUser","registerUser","errorMessage","method","user","findByUsername","body","validPassword","password","accessToken","add","e"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,SAASA,QAAT,CAAkB;AACdA,EAAAA,QADc;AAEdC,EAAAA;AAFc,CAAlB,EAGG;AACC,SAAO;AACHC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KADN;AAIHC,IAAAA,UAAU,EAAEF,IAJT;AAKHG,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACbN,MAAAA;AADa,KAAf;AALH,GAAP;AAWH;;AACc,SAASO,uBAAT,CAAiC;AAC5CC,EAAAA;AAD4C,CAAjC,EAEZ;AACC,SAAO,eAAeC,MAAf,CAAsBC,WAAtB,EAAmC;AACtC,YAAQA,WAAW,CAACC,IAApB;AACI,WAAK,QAAL;AACI,eAAOC,SAAS,CACZF,WADY,CAAhB;;AAGJ,WAAK,WAAL;AACI,eAAOG,YAAY,CAACH,WAAD,CAAnB;;AAEJ;AACI,eAAO,wBAAc;AACjBP,UAAAA,UAAU,EAAE,GADK;AAEjBW,UAAAA,YAAY,EAAG,GAAEJ,WAAW,CAACK,MAAO;AAFnB,SAAd,CAAP;AATR;AAcH,GAfD,CADD,CAiBC;;AACA,iBAAeH,SAAf,CAAyBF,WAAzB,EAAsC;AAClC,QAAIM,IAAI,GAAG,MAAMR,QAAQ,CAACS,cAAT,CAAwB;AACrC,kBAAYP,WAAW,CAACQ,IAAZ,CAAiB,UAAjB;AADyB,KAAxB,CAAjB;AAGA,QAAIC,aAAa,GAAG,MAAM,4BAAc;AACpC,kBAAYT,WAAW,CAACQ,IAAZ,CAAiB,UAAjB,CADwB;AAEpC,cAAQF,IAAI,CAACI;AAFuB,KAAd,CAA1B;;AAKA,QAAID,aAAJ,EAAmB;AACf,UAAIE,WAAW,GAAG,MAAM,2BAAW;AAC/BL,QAAAA;AAD+B,OAAX,CAAxB;AAIA,aAAOhB,QAAQ,CAAC;AACZ,oBAAY;AACR,qBAAW,IADH;AAER,yBAAeqB;AAFP,SADA;AAKZ,gBAAQ;AALI,OAAD,CAAf;AAOH,KAZD,MAYO;AACH,aAAOrB,QAAQ,CAAC;AACZ,oBAAY;AACR,qBAAW,KADH;AAER,mBAAS;AAFD,SADA;AAKZ,gBAAQ;AALI,OAAD,CAAf;AAOH;AAEJ,GAjDF,CAoDC;;;AACA,iBAAea,YAAf,CAA4BH,WAA5B,EAAyC;AACrC,QAAI;AACA,UAAIM,IAAI,GAAG,MAAMR,QAAQ,CAACc,GAAT,CAAa;AAC1B,gBAAQ;AACJ,sBAAYZ,WAAW,CAACQ,IAAZ,CAAiB,UAAjB,CADR;AAEJ,sBAAY,qBAAO;AACf,wBAAYR,WAAW,CAACQ,IAAZ,CAAiB,UAAjB;AADG,WAAP,CAFR;AAKJ,kBAAQR,WAAW,CAACQ,IAAZ,CAAiB,MAAjB;AALJ;AADkB,OAAb,CAAjB;AAUA,UAAIG,WAAW,GAAG,MAAM,2BAAW;AAC/BL,QAAAA;AAD+B,OAAX,CAAxB;AAIA,aAAOhB,QAAQ,CAAC;AACZ,oBAAY;AACR,qBAAW,IADH;AAER,yBAAeqB;AAFP,SADA;AAKZ,gBAAQ;AALI,OAAD,CAAf;AAQH,KAvBD,CAuBE,OAAOE,CAAP,EAAU;AAER,aAAO,wBAAc;AACjBpB,QAAAA,UAAU,EAAE,GADK;AAEjBW,QAAAA,YAAY,EAAG,GAAES,CAAE;AAFF,OAAd,CAAP;AAKH;AACJ;AACJ","sourcesContent":["import makeHttpError from \"../validators/http-error\";\nimport hashValidator from '../validators/hash-validator'\nimport jwtHandler from '../../helpers/validators/token-handler'\nimport hasher from '../../helpers/hasher'\n\nfunction response({\n    response,\n    code\n}) {\n    return {\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        statusCode: code,\n        data: JSON.stringify({\n                response\n            }\n\n        )\n    };\n}\nexport default function makeAuthEndPointHanlder({\n    userList\n}) {\n    return async function handle(httpRequest) {\n        switch (httpRequest.path) {\n            case \"/login\":\n                return loginUser(\n                    httpRequest\n                );\n            case \"/register\":\n                return registerUser(httpRequest);\n\n            default:\n                return makeHttpError({\n                    statusCode: 405,\n                    errorMessage: `${httpRequest.method} method not allowed.`\n                });\n        }\n    };\n    //Login single user and return access token\n    async function loginUser(httpRequest) {\n        let user = await userList.findByUsername({\n            \"username\": httpRequest.body[\"username\"]\n        })\n        let validPassword = await hashValidator({\n            \"password\": httpRequest.body[\"password\"],\n            \"hash\": user.password\n        })\n\n        if (validPassword) {\n            let accessToken = await jwtHandler({\n                user\n            })\n\n            return response({\n                \"response\": {\n                    \"success\": true,\n                    \"accessToken\": accessToken\n                },\n                \"code\": 200,\n            });\n        } else {\n            return response({\n                \"response\": {\n                    \"success\": false,\n                    \"error\": \"Invalid Credentials\"\n                },\n                \"code\": 401\n            });\n        }\n\n    }\n\n\n    //Register single user and return access token\n    async function registerUser(httpRequest) {\n        try {\n            var user = await userList.add({\n                \"user\": {\n                    \"username\": httpRequest.body[\"username\"],\n                    \"password\": hasher({\n                        \"password\": httpRequest.body[\"password\"],\n                    }),\n                    \"role\": httpRequest.body[\"role\"],\n                }\n            })\n\n            let accessToken = await jwtHandler({\n                user\n            })\n\n            return response({\n                \"response\": {\n                    \"success\": true,\n                    \"accessToken\": accessToken\n                },\n                \"code\": 200,\n            });\n\n        } catch (e) {\n\n            return makeHttpError({\n                statusCode: 405,\n                errorMessage: `${e}.`\n            });\n\n        }\n    }\n}"],"file":"auth-endpoint.js"}