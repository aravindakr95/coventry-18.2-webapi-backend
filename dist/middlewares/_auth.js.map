{"version":3,"sources":["../../src/middlewares/_auth.js"],"names":["authenticateJWT","req","res","next","authHeader","headers","authorization","token","split","jwt","verify","config","JWT_SECRET_KEY","err","user","sendStatus"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;AACe,SAASA,eAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACpD,QAAMC,UAAU,GAAGH,GAAG,CAACI,OAAJ,CAAYC,aAA/B;;AAEA,MAAIF,UAAJ,EAAgB;AACZ,UAAMG,KAAK,GAAGH,UAAU,CAACI,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAd;;AAEAC,0BAAIC,MAAJ,CAAWH,KAAX,EAAkBI,gBAAOC,cAAzB,EAAyC,CAACC,GAAD,EAAMC,IAAN,KAAe;AACpD,UAAID,GAAJ,EAAS;AACL,eAAOX,GAAG,CAACa,UAAJ,CAAe,GAAf,CAAP;AACH;;AAEDd,MAAAA,GAAG,CAACa,IAAJ,GAAWA,IAAX;AACAX,MAAAA,IAAI;AACP,KAPD;AAQH,GAXD,MAWO;AACHD,IAAAA,GAAG,CAACa,UAAJ,CAAe,GAAf;AACH;AACJ;;AAAA","sourcesContent":["import jwt from 'jsonwebtoken';\nimport config from '../config/config'\n\n//token check middleware\nexport default function authenticateJWT(req, res, next) {\n    const authHeader = req.headers.authorization;\n\n    if (authHeader) {\n        const token = authHeader.split(' ')[1];\n\n        jwt.verify(token, config.JWT_SECRET_KEY, (err, user) => {\n            if (err) {\n                return res.sendStatus(403);\n            }\n\n            req.user = user;\n            next();\n        });\n    } else {\n        res.sendStatus(401);\n    }\n};"],"file":"_auth.js"}